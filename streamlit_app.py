# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_8X5fXG6rByz7Ifzy1llTiF1LRPArcP
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials

# -----------------------------
# CONFIGURACI√ìN GOOGLE SHEETS
# -----------------------------
SCOPE = ["https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive"]

creds = Credentials.from_service_account_file(
    "service_account.json",
    scopes=SCOPE
)

gc = gspread.authorize(creds)

SHEET_NAME = "Confirmacion_Carga_Docente"
spreadsheet = gc.open(SHEET_NAME)
worksheet = spreadsheet.sheet1

# -----------------------------
# CARGA DEL CSV DE CARGA DOCENTE
# -----------------------------
@st.cache_data
def cargar_datos():
    df = pd.read_csv("Datos_Roster_V2.csv")
    df.columns = df.columns.str.strip()
    return df

df = cargar_datos()

# -----------------------------
# CLASIFICAR TIPO DE UF
# -----------------------------
def clasificar_tipo_uf(uf):
    if isinstance(uf, str):
        if uf.endswith("S"):
            return "Semana Tec"
        elif uf.endswith("B"):
            return "Bloque"
        elif uf.endswith("C"):
            return "Concentraci√≥n"
        else:
            return "Materia"
    return "Desconocido"

df["Tipo de UF"] = df["UF"].apply(clasificar_tipo_uf)

# Agregar coordinadores
if "Carga Co." in df.columns:
    coordinadores = df[df["Carga Co."].notnull()][["UF", "Grupo", "Profesor", "Correo"]].copy()
    coordinadores = coordinadores.rename(columns={
        "Profesor": "Coordinador",
        "Correo": "Correo Coordinador"
    })
    df = df.merge(coordinadores, on=["UF", "Grupo"], how="left")

# -----------------------------
# INTERFAZ DE USUARIO
# -----------------------------
st.title("ü§ñ Confirmaci√≥n de Carga Acad√©mica")

st.markdown("üëã **Hola Profesor, estoy aqu√≠ para ayudarte a revisar tu carga acad√©mica para este pr√≥ximo semestre.**")

nombre_profesor = st.text_input("Por favor ind√≠came tu nombre:")

if nombre_profesor.strip() != "":
    nomina = st.text_input(f"Gracias {nombre_profesor}, ahora por favor ingresa tu n√∫mero de n√≥mina (ej. L01234567):")

    if nomina:
        datos_profesor = df[df["N√≥mina"] == nomina].copy()

        if datos_profesor.empty:
            st.warning("‚ö†Ô∏è No se encontraron asignaciones para esa n√≥mina.")
        else:
            datos_profesor["Carga Co."] = pd.to_numeric(datos_profesor.get("Carga Co.", 0), errors="coerce").fillna(0)
            datos_profesor["UDCs"] = pd.to_numeric(datos_profesor.get("UDCs", 0), errors="coerce").fillna(0)

            total_carga_co = round(datos_profesor["Carga Co."].sum(), 2)
            total_udcs = round(datos_profesor["UDCs"].sum(), 2)
            udcs_totales = round(total_udcs + total_carga_co, 2)

            def mostrar_coordinador(row):
                if row["Tipo de UF"] in ["Bloque", "Concentraci√≥n"]:
                    return f"{row.get('Coordinador', '')} ({row.get('Correo Coordinador', '')})"
                return ""

            datos_profesor["Coordinador de Bloque"] = datos_profesor.apply(mostrar_coordinador, axis=1)
            datos_profesor["Grupo"] = datos_profesor["Grupo"].fillna("").apply(
                lambda x: str(int(x)) if isinstance(x, float) else str(x)
            )

            columnas = [
                "UF", "Grupo", "Nombre de UF", "Ingl√©s", "Tipo de UF",
                "% de Resp", "UDCs", "Periodo", "Horario", "Coordinador de Bloque"
            ]
            resultado = datos_profesor[columnas]

            st.subheader("üìã Esta es tu carga acad√©mica asignada:")
            st.dataframe(resultado, use_container_width=True)

            col1, col2, col3 = st.columns(3)
            col1.metric("üìò Total UDCs Docente", f"{total_udcs}")
            col2.metric("üë• Total UDCs Coordinaci√≥n", f"{total_carga_co}")
            col3.metric("üìä UDCs Totales", f"{udcs_totales}")

            st.subheader("‚úÖ Confirmaci√≥n de carga")
            confirmacion = st.radio("¬øConfirmas tu carga acad√©mica asignada para este semestre?", ["S√≠", "No"], horizontal=True)

            if confirmacion == "S√≠":
                st.info("‚úÖ Gracias por confirmar tu carga, apreciamos mucho tu dedicaci√≥n y colaboraci√≥n en este proceso. Mucho √©xito para este semestre.")
                comentario_placeholder = "Si tienes alg√∫n comentario adicional, puedes indicarlo aqu√≠."
            else:
                st.warning("‚ö†Ô∏è Lamentamos que tu carga actual no sea de tu agrado. Por favor expl√≠canos qu√© parte de tu carga presenta una limitaci√≥n para poder revisarla.")
                comentario_placeholder = "Por favor detalla las limitaciones que observas en tu carga."

            comentarios = st.text_area(
                "En caso de tener alg√∫n comentario, duda o sugerencia respecto a tu carga acad√©mica asignada, por favor ind√≠calo a continuaci√≥n:",
                placeholder=comentario_placeholder
            )

            if st.button("üì® Enviar"):
                fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                fila = [
                    fecha_hora,
                    nomina,
                    nombre_profesor,
                    confirmacion,
                    comentarios
                ]

                worksheet.append_row(fila)

                st.success("‚úÖ Tu confirmaci√≥n y comentarios se han registrado correctamente. ¬°Gracias por tu tiempo!")